name: Terraform Validation

on:
  push:
    branches: [ github-refactor-best-practices ] #[ main, github-refactor-best-practices ]
  pull_request:
    branches: [ main ]

jobs:
  terraform-fmt:
    name: Terraform Format Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest

    - name: Terraform Format Check
      run: terraform fmt -check -recursive

  version-extract:
    name: Extract Min/Max Versions
    runs-on: ubuntu-latest
    outputs:
      minVersion: ${{ steps.minMax.outputs.minVersion }}
      maxVersion: ${{ steps.minMax.outputs.maxVersion }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract Terraform min/max versions
        id: minMax
        uses: clowdhaus/terraform-min-max@v1.4.1

  
  terraform-version-validate:
    name: Validate Min/Max Versions
    runs-on: ubuntu-latest
    needs: version-extract
    strategy:
      matrix:
        version:
          - ${{ needs.version-extract.outputs.minVersion }}
          - ${{ needs.version-extract.outputs.maxVersion }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Terraform v${{ matrix.version }}
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ matrix.version }}

      - name: Initialize and validate v${{ matrix.version }}
        run: |
          terraform init
          #terraform validate --color=always --show-diff-on-failure --files $(ls *.tf)
          terraform validate

  terraform-validation:
    name: Terraform Validation
    if: false
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Extract Terraform min/max versions
      id: minMax
      uses: clowdhaus/terraform-min-max@v1.4.0

    - name: Setup Terraform (min version)
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ steps.minMax.outputs.minVersion }}

    - name: Terraform Init and Validate (min version)
      run: |
        terraform init
        #terraform validate --color=always --show-diff-on-failure --files $(ls *.tf)
        terraform validate

    - name: Setup Terraform (max version)
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ steps.minMax.outputs.maxVersion }}

    - name: Terraform Init and Validate (max version)
      run: |
        terraform init
        #terraform validate --color=always --show-diff-on-failure --files $(ls *.tf)
        terraform validate

